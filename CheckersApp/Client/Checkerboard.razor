@using Data
@using Microsoft.AspNetCore.SignalR.Client

@code {
    [Parameter] public HubConnection HubConnection { get; set; }
    [Parameter] public string TableId { get; set; }
    [Parameter] public string playerName { get; set; }
    [Parameter] public bool IsWhitePlayer { get; set; }

    List<Checker> blackCheckers = new List<Checker>();
    List<Checker> whiteCheckers = new List<Checker>();
    List<Message> messages = new List<Message>();

    protected string Context { get; set; } = "";
    string whitePlayer = "";
    string blackPlayer = "";

    protected override void OnInitialized()
    {
        if (IsWhitePlayer)
        {
            whitePlayer = playerName;
            @* HubConnection.SendAsync("AddWhitePlayer", TableId, playerName);*@
        }

        if (!IsWhitePlayer)
        {
            blackPlayer = playerName;
            @*           HubConnection.SendAsync("AddBlackPlayer", TableId, playerName);*@
        }
        for (int i = 0; i < 3; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                blackCheckers.Add(new Checker
                {
                    Color = "black",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Down
                });
            }
        }

        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                whiteCheckers.Add(new Checker
                {
                    Color = "white",
                    Column = j,
                    Row = i,
                    Direction = CheckerDirection.Up
                });
            }
        }

        HubConnection.On<int, int, int, int>("Move", ServerMove);
        HubConnection.On<string, string>("Message", (playername, context) => {
            messages.Add(new Message(playername, context));
            refreshMessages();
        });

        void ServerMove(int previousColumn, int previousRow, int newColumn, int newRow)
        {
            var checker = blackCheckers.FirstOrDefault(n => n.Column == previousColumn && n.Row == previousRow);
            if (checker == null)
            {
                checker = whiteCheckers.FirstOrDefault(n => n.Column == previousColumn && n.Row == previousRow);
            }
            activeChecker = checker;
            EvaluateCheckerSpots();
            MoveChecker(newRow, newColumn);
        }

    }

    Checker activeChecker = null;
    List<(int row, int column)> cellsPossible = new();
    string winner = "";
    int emptyMoves = 0;
    public void refreshMessages()
    {
        StateHasChanged();
    }

    void EvaluateGameStatus()
    {
        if (blackCheckers.Count == 0)
        {
            if (IsWhitePlayer)
            {
                winner = "You won";
                HubConnection.SendAsync("UpdateScore", playerName, true);
            }
            if (!IsWhitePlayer)
            {
                winner = "You lost";
                HubConnection.SendAsync("UpdateScore", playerName, false);
            }

            gameOn = false;
        }
        if (whiteCheckers.Count == 0)
        {
            if (!IsWhitePlayer)
            {
                winner = "You won";
                HubConnection.SendAsync("UpdateScore", playerName, true);
            }
            if (IsWhitePlayer)
            {
                winner = "You lost";
                HubConnection.SendAsync("UpdateScore", playerName, false);
            }

            gameOn = false;
        }
        if (emptyMoves == 20)
        {
            gameOn = false;
            winner = "draw";
        }
    }

    void EvaluateCheckerSpots()
    {
        cellsPossible.Clear();
        if (activeChecker != null)
        {
            List<int> rowsPossible = new List<int>();
            if (activeChecker.Direction == CheckerDirection.Down ||
                activeChecker.Direction == CheckerDirection.Both)
            {
                rowsPossible.Add(activeChecker.Row + 1);
            }
            if (activeChecker.Direction == CheckerDirection.Up ||
                activeChecker.Direction == CheckerDirection.Both)
            {
                rowsPossible.Add(activeChecker.Row - 1);
            }

            foreach (var row in rowsPossible)
            {
                EvaluateSpot(row, activeChecker.Column - 1);
                EvaluateSpot(row, activeChecker.Column + 1);
            }
        }
    }

    void EvaluateSpot(int row, int column, bool firstTime = true)
    {
        var blackChecker = blackCheckers.FirstOrDefault(
            n => n.Column == column && n.Row == row);

        var whiteChecker = whiteCheckers.FirstOrDefault(
            n => n.Column == column && n.Row == row);

        if (blackChecker == null && whiteChecker == null)
        {
            cellsPossible.Add((row, column));
        }
        else if (firstTime)
        {
            // can i jump this checker?
            if ((whiteTurn && blackChecker != null) ||
                (!whiteTurn && whiteChecker != null))
            {
                int columnDifference = column - activeChecker.Column;
                int rowDifference = row - activeChecker.Row;

                EvaluateSpot(row + rowDifference, column + columnDifference, false);
            }
        }
    }

    void MoveChecker(int row, int column)
    {
        bool canMoveHere = cellsPossible.Contains((row, column));
        if (!canMoveHere)
        {
            return;
        }
        else
        {
            emptyMoves++;
        }

        if (Math.Abs(activeChecker.Column - column) == 2)
        {
            // we jumped something
            int jumpedColumn = (activeChecker.Column + column) / 2;
            int jumpedRow = (activeChecker.Row + row) / 2;

            var blackChecker = blackCheckers.FirstOrDefault(
                n => n.Row == jumpedRow && n.Column == jumpedColumn);

            if (blackChecker != null)
                blackCheckers.Remove(blackChecker);

            var whiteChecker = whiteCheckers.FirstOrDefault(
                n => n.Row == jumpedRow && n.Column == jumpedColumn);

            if (whiteChecker != null)
                whiteCheckers.Remove(whiteChecker);
            emptyMoves = 0;
        }
        HubConnection.SendAsync("Move", TableId, activeChecker.Column, activeChecker.Row, column, row);

        activeChecker.Column = column;
        activeChecker.Row = row;

        if (activeChecker.Row == 0 && activeChecker.Color == "white")
        {
            activeChecker.Direction = CheckerDirection.Both;
        }
        if (activeChecker.Row == 7 && activeChecker.Color == "black")
        {
            activeChecker.Direction = CheckerDirection.Both;
        }

        activeChecker = null;
        whiteTurn = !whiteTurn;
        EvaluateGameStatus();
        EvaluateCheckerSpots();
        StateHasChanged();
    }

    void CheckerClicked(Checker checker)
    {
        if (whiteTurn != IsWhitePlayer)
        {
            return;
        }
        if (whiteTurn && checker.Color == "black")
            return;
        if (!whiteTurn && checker.Color == "white")
            return;
        activeChecker = checker;
        EvaluateCheckerSpots();
    }

    bool whiteTurn = true;
    bool gameOn = true;
}
<div style="display:inline-block;margin-left:60px;">
    @for (int i = 0; i < 8; i++)
    {
        int localI = i;
        <div class="row" style="width:700px;">
            @if (gameOn == true)
            {
                @for (int j = 0; j < 8; j++)
                {
                    int localJ = j;
                    var checker = blackCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                    if (checker == null)
                    {
                        checker = whiteCheckers.FirstOrDefault(n => n.Column == j && n.Row == i);
                    }

                    bool canMoveHere = cellsPossible.Contains((i, j));

                    <div @onclick="() => MoveChecker(localI, localJ)" class="cell @(canMoveHere ? "active" : "")">
                        @if (checker != null)
                        {
                            <div @onclick="() => CheckerClicked(checker)"
                                 class="checker @checker.Color @(checker == activeChecker ? "active" : "")">
                                <span>@(checker.Direction == CheckerDirection.Both ? "K" : "")</span>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    }
</div>
<div class="chat">
    <div class="card-header">
        <h4 class="card-title"><strong>Game chat</strong></h4>
    </div>
    <div class="ps-container " style="overflow-y: scroll !important; height:521px !important;">
        @foreach (Message message in messages)
         {
            <div class="media media-chat">
                <div class="media-body">
                    <p>@message.player:</p>
                    @message.context
                </div>
            </div>
         }
        <div class="ps-scrollbar-x-rail">
            <div class="ps-scrollbar-x" tabindex="0" style="left: 0px; width: 0px;"></div>
        </div>
        <div class="ps-scrollbar-y-rail" style="top: 0px; height: 0px; right: 2px;">
            <div class="ps-scrollbar-y" tabindex="0" style="top: 0px; height: 2px;">
            </div>
        </div>
    </div>
    <div class="publisher">
        <span class="avatar-img"><img class="avatar avatar-xs" src="https://img.icons8.com/color/36/000000/administrator-male.png" alt="..."></span>
        <input class="publisher-input" placeholder="write your message" value="@Context" @onchange="@(e => { Context = e.Value.ToString(); })" />
        <button class="btn btn-primary" style="float:right;margin:1%;" @onclick="@(() => HubConnection.SendAsync("Message", TableId, @playerName, @Context))">Send</button>
    </div>
</div>
@if (gameOn == false)
{
    <span style="font-size:100px">Game Over</span>
    <br />
    <p style="font-size:50px">@winner</p>
    HubConnection.SendAsync("Delete", TableId);
}
